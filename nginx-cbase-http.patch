diff -up ./src/http/ngx_http_variables.c.orig ./src/http/ngx_http_variables.c
--- ./src/http/ngx_http_variables.c.orig	2012-04-03 15:37:31.000000000 +0800
+++ ./src/http/ngx_http_variables.c	2012-08-27 17:29:41.566057638 +0800
@@ -10,6 +10,14 @@
 #include <ngx_http.h>
 #include <nginx.h>
 
+static void
+ngx_bubble_sort(u_char **a, int num);
+static ngx_int_t
+ngx_static_cmp(u_char *first, u_char *second);
+static ngx_int_t
+ngx_http_variable_cbase_memc_key(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data);
+
 
 static ngx_int_t ngx_http_variable_request(ngx_http_request_t *r,
     ngx_http_variable_value_t *v, uintptr_t data);
@@ -121,6 +129,9 @@ static ngx_http_variable_t  ngx_http_cor
     { ngx_string("http_host"), NULL, ngx_http_variable_header,
       offsetof(ngx_http_request_t, headers_in.host), 0, 0 },
 
+    { ngx_string("cbase_memc_key"), NULL, ngx_http_variable_cbase_memc_key,
+      0, 0, 0 },
+
     { ngx_string("http_user_agent"), NULL, ngx_http_variable_header,
       offsetof(ngx_http_request_t, headers_in.user_agent), 0, 0 },
 
@@ -2170,3 +2181,127 @@ ngx_http_variables_init_vars(ngx_conf_t 
 
     return NGX_OK;
 }
+
+static ngx_int_t
+ngx_static_cmp(u_char *first, u_char *second) {
+
+    if (first == NULL && second == NULL) {
+        return 0;
+    }
+
+    if (first != NULL && second != NULL && first == '\0' && second == '\0') {
+        return 0;
+    }
+
+    if (first == NULL || *first == '\0') {
+        return -1;
+    }
+
+    if (second == NULL || *second == '\0') {
+        return 1;
+    }
+
+    if (*first == *second) {
+        first++;
+        second++;
+        return ngx_static_cmp(first, second);
+    }
+
+    if (*first < *second) {
+        return -1;
+    }
+
+    return 1;
+}
+
+
+static void
+ngx_bubble_sort(u_char **a, int num) {
+    int i = 0;
+    int j = 0 ;
+    u_char *temp = NULL;
+    if (a == NULL) {
+        return;
+    }
+    for (j=0; j < num;j++) {
+        for (i= 0; i < num - j - 1; i++) {
+            if (ngx_static_cmp(a[i] , a[i+1]) > 0) {
+               temp = a[i];
+               a[i] = a[i+1];
+               a[i+1] = temp;
+            }
+        }
+    }
+}
+
+static ngx_int_t
+ngx_http_variable_cbase_memc_key(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data)
+{
+    char *p = NULL;
+    if ((r->args.len > 0) && (r->args.len + r->uri.len + 1 < 250)) {
+        char path_sep[] = "&";
+        u_char *element[256];
+        u_char *key = NULL, *key_index, *result;
+        int num = 0;
+        int i = 0;
+        int length = 0;
+        p = ngx_pcalloc(r->pool, r->args.len + 1);
+        key = ngx_pcalloc(r->pool, r->args.len + r->uri.len + 1);
+        if (p == NULL || key == NULL) {
+            *v = ngx_http_variable_null_value;
+            return NGX_OK;
+        }
+
+        key_index = ngx_copy(p , r->args.data, r->args.len);
+
+        result = (u_char *) strtok(p , path_sep);
+
+        while(NULL != result) {
+            u_char * temp = result;
+            while(temp != '\0' && *temp == '&') {
+                temp++;
+            }
+            if (temp != '\0') {
+                element[num] = temp;
+                num++;
+            }
+            result = (u_char *) strtok(NULL, path_sep);
+        }
+
+        ngx_bubble_sort(element, num);
+
+        key_index = key;
+        key_index = ngx_copy(key_index, r->uri.data, r->uri.len);
+        key_index = ngx_copy(key_index, "?" , 1);
+        length = r->uri.len + 1;
+        for (i = 0; i < num - 1; i++) {
+            int len = strlen((char *) element[i]);
+            key_index = ngx_copy(key_index, element[i], len);
+            key_index = ngx_copy(key_index, "&" , 1);
+            length += len;
+            length++;
+        }
+
+        int len = strlen((char *)element[num - 1]);
+        length += len;
+        key_index = ngx_copy(key_index, element[num - 1], len);
+
+        v->len = length;
+        v->valid = 1;
+        v->no_cacheable = 0;
+        v->not_found = 0;
+        v->data = key;
+
+        return NGX_OK;
+
+    } else {
+        v->len = r->uri.len;
+        v->valid = 1;
+        v->no_cacheable = 0;
+        v->not_found = 0;
+        v->data = r->uri.data;
+        return NGX_OK;
+    }
+
+}
